name: Auto Build and Release

on:
  push:
    branches:
      - main

jobs:
  # Add a new check-changes job that other jobs will depend on
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      python_changed: ${{ steps.check_files.outputs.python_changed }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for checking changes

      - name: Check for Python file changes
        id: check_files
        run: |
          git diff --name-only ${{ github.event.before }} ${{ github.event.after }} > changes.txt
          echo "python_changed=$(if grep -q '\.py$' changes.txt; then echo 'true'; else echo 'false'; fi)" >> $GITHUB_OUTPUT

  # Modify existing jobs to depend on check-changes
  build-linux:
    needs: check-changes
    if: needs.check-changes.outputs.python_changed == 'true'
    runs-on: ubuntu-latest
    outputs:
      artifact-linux: ${{ steps.upload-linux.outputs.artifact }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12.7"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt

      - name: Build for Linux
        run: |
          pyinstaller --onefile src/passwgen.py
        env:
          PYTHONUNBUFFERED: "1"

      - name: Upload Linux Artifact
        id: upload-linux
        uses: actions/upload-artifact@v3
        with:
          name: linux-build
          path: dist/passwgen
  
  build-linux-ui:
    needs: check-changes
    if: needs.check-changes.outputs.python_changed == 'true'
    runs-on: ubuntu-latest
    outputs:
      artifact-linux: ${{ steps.upload-linux.outputs.artifact }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12.7"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt

      - name: Build for Linux
        run: |
          pyinstaller --onefile src/ui.py
        env:
          PYTHONUNBUFFERED: "1"

      - name: Upload Linux Artifact
        id: upload-linux
        uses: actions/upload-artifact@v3
        with:
          name: linux-build-ui
          path: dist/ui

  # Job to build the executable for Windows
  build-windows:
    needs: check-changes
    if: needs.check-changes.outputs.python_changed == 'true'
    runs-on: windows-latest
    outputs:
      artifact-windows: ${{ steps.upload-windows.outputs.artifact }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12.7"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt

      - name: Build for Windows
        run: |
          pyinstaller --onefile src\passwgen.py
        env:
          PYTHONUNBUFFERED: "1"

      - name: Upload Windows Artifact
        id: upload-windows
        uses: actions/upload-artifact@v3
        with:
          name: windows-build
          path: dist/passwgen.exe
  
  build-windows-ui:
    needs: check-changes
    if: needs.check-changes.outputs.python_changed == 'true'
    runs-on: windows-latest
    outputs:
      artifact-windows: ${{ steps.upload-windows.outputs.artifact }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12.7"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt

      - name: Build for Windows
        run: |
          pyinstaller --onefile src\ui.py
        env:
          PYTHONUNBUFFERED: "1"

      - name: Upload Windows Artifact
        id: upload-windows
        uses: actions/upload-artifact@v3
        with:
          name: windows-build-ui
          path: dist/ui.exe

  # Job to create a GitHub release and tag the version
  create-release:
    needs: [check-changes, build-linux, build-windows, build-linux-ui, build-windows-ui]
    if: needs.check-changes.outputs.python_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      # Add this checkout step first
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Important to fetch all history and tags

      - name: Download Linux Artifact
        uses: actions/download-artifact@v3
        with:
          name: linux-build

      - name: Download Windows Artifact
        uses: actions/download-artifact@v3
        with:
          name: windows-build
      
      - name: Download UI Linux Artifact
        uses: actions/download-artifact@v3
        with:
          name: linux-build-ui

      - name: Download UI Windows Artifact
        uses: actions/download-artifact@v3
        with:
          name: windows-build-ui

      - name: Determine Next Version
        id: versioning
        run: |
          git fetch --tags
          latest_tag=$(git tag -l "autobuild.*" | sort -V | tail -n 1 || echo "autobuild.0")
          latest_version=${latest_tag#autobuild.}
          next_version=$((latest_version + 1))
          echo "next_version=autobuild.${next_version}" >> $GITHUB_ENV
          echo "next_version=autobuild.${next_version}" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: |
            passwgen
            passwgen.exe
            ui
            ui.exe
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.versioning.outputs.next_version }}
          name: Release ${{ steps.versioning.outputs.next_version }}
          body: |
            Automated release for ${{ steps.versioning.outputs.next_version }}.
          draft: false
          prerelease: false
